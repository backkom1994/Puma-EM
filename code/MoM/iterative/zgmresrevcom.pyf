#######################################################################
##
## zgmresrevcom.pyf
##
## Copyright (C) 2016 Idesbald Van den Bosch
##
## This file is part of Puma-EM.
## 
## Puma-EM is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Puma-EM is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Puma-EM.  If not, see <http://www.gnu.org/licenses/>.
##
## Suggestions/bugs : <vandenbosch.idesbald@gmail.com>
##
#######################################################################

!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module zgmresrevcom ! in 
    interface  ! in :zgmresrevcom
        subroutine zgmresrevcom(n,a,b,x,restrt,work,ldw,work2,ldw2,iter,resid,info,ndx1,ndx2,sclr1,sclr2,ijob) ! in :zgmresrevcom:ZGMRESREVCOM.f
            integer, intent(hide), depend(b) :: n=len(b)
            complex*16 dimension(n,*) :: a
            complex*16 dimension(n) :: b
            complex*16 dimension(n), intent(in,out) :: x
            integer, intent(in), depend(n), check((0<restrt) && (restrt<=n)) :: restrt
            complex*16 intent(inout), dimension(ldw*(6+restrt)) :: work
            integer intent(hide) :: ldw=MAX(1,n)
            complex*16 intent(inout), depend(restrt,ldw2), dimension(ldw2*(2*restrt+2)) :: work2
            integer intent(hide), depend(restrt) :: ldw2=MAX(2,restrt+1)
            integer intent(in, out) :: iter
            double precision intent(in,out) :: resid
            integer intent(in, out) :: info
            integer intent(in, out) :: ndx1
            integer intent(in, out) :: ndx2
            complex*16 intent(out) :: sclr1
            complex*16 intent(out) :: sclr2
            integer intent(in, out) :: ijob
        end subroutine zgmresrevcom
        subroutine zorthoh(i,n,h,v,ldv,w) ! in :zgmresrevcom:ZGMRESREVCOM.f
            integer :: i
            integer :: n
            complex*16 dimension(*) :: h
            complex*16 dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            complex*16 dimension(*) :: w
        end subroutine zorthoh
        subroutine zapplygivens(i,h,givens,ldg) ! in :zgmresrevcom:ZGMRESREVCOM.f
            integer :: i
            complex*16 dimension(*) :: h
            complex*16 dimension(ldg,*) :: givens
            integer optional,check(shape(givens,0)==ldg),depend(givens) :: ldg=shape(givens,0)
        end subroutine zapplygivens
        function dzapproxres(i,h,s,givens,ldg) ! in :zgmresrevcom:ZGMRESREVCOM.f
            integer :: i
            complex*16 dimension(*) :: h
            complex*16 dimension(*) :: s
            complex*16 dimension(ldg,*) :: givens
            integer optional,check(shape(givens,0)==ldg),depend(givens) :: ldg=shape(givens,0)
            double precision :: dzapproxres
        end function dzapproxres
        subroutine zupdate(i,n,x,h,ldh,y,s,v,ldv) ! in :zgmresrevcom:ZGMRESREVCOM.f
            integer :: i
            integer :: n
            complex*16 dimension(*) :: x
            complex*16 dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            complex*16 dimension(*) :: y
            complex*16 dimension(*) :: s
            complex*16 dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
        end subroutine zupdate
        subroutine zgetgiv(a,b,c,s) ! in :zgmresrevcom:ZGMRESREVCOM.f
            complex*16 :: a
            complex*16 :: b
            complex*16 :: c
            complex*16 :: s
        end subroutine zgetgiv
        subroutine zrotvec(x,y,c,s) ! in :zgmresrevcom:ZGMRESREVCOM.f
            complex*16 :: x
            complex*16 :: y
            complex*16 :: c
            complex*16 :: s
        end subroutine zrotvec
        subroutine zelemvec(i,n,alpha,e) ! in :zgmresrevcom:ZGMRESREVCOM.f
            integer :: i
            integer :: n
            complex*16 :: alpha
            complex*16 dimension(*) :: e
        end subroutine zelemvec
        subroutine matvec(n,a,alpha,x,beta,y) ! in :zgmresrevcom:ZGMRESREVCOM.f
            integer optional,check(shape(a,0)==n),depend(a) :: n=shape(a,0)
            complex*16 dimension(n,*) :: a
            complex*16 :: alpha
            complex*16 dimension(*) :: x
            complex*16 :: beta
            complex*16 dimension(*) :: y
        end subroutine matvec
        subroutine zaxpy(n,za,zx,incx,zy,incy) ! in :zgmresrevcom:zaxpy.f
            integer :: n
            double complex :: za
            double complex dimension(*) :: zx
            integer :: incx
            double complex dimension(*) :: zy
            integer :: incy
        end subroutine zaxpy
        subroutine zrotg(ca,cb,c,s) ! in :zgmresrevcom:zrotg.f
            double complex :: ca
            double complex :: cb
            double precision :: c
            double complex :: s
        end subroutine zrotg
        function zdotc(n,zx,incx,zy,incy) ! in :zgmresrevcom:zdotc.f
            integer :: n
            double complex dimension(*) :: zx
            integer :: incx
            double complex dimension(*) :: zy
            integer :: incy
            double complex :: zdotc
        end function zdotc
        function dcabs1(z) ! in :zgmresrevcom:dcabs1.f
            double complex :: z
            double precision :: dcabs1
        end function dcabs1
        subroutine ztrsv(uplo,trans,diag,n,a,lda,x,incx) ! in :zgmresrevcom:ztrsv.f
            character*1 :: uplo
            character*1 :: trans
            character*1 :: diag
            integer :: n
            complex*16 dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            complex*16 dimension(*) :: x
            integer :: incx
        end subroutine ztrsv
        subroutine xerbla(srname,info) ! in :zgmresrevcom:xerbla.f
            character*6 :: srname
            integer :: info
        end subroutine xerbla
        subroutine zgemv(trans,m,n,alpha,a,lda,x,incx,beta,y,incy) ! in :zgmresrevcom:zgemv.f
            character*1 :: trans
            integer :: m
            integer :: n
            complex*16 :: alpha
            complex*16 dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            complex*16 dimension(*) :: x
            integer :: incx
            complex*16 :: beta
            complex*16 dimension(*) :: y
            integer :: incy
        end subroutine zgemv
        subroutine zscal(n,za,zx,incx) ! in :zgmresrevcom:zscal.f
            integer :: n
            double complex :: za
            double complex dimension(*) :: zx
            integer :: incx
        end subroutine zscal
        function dznrm2(n,x,incx) ! in :zgmresrevcom:dznrm2.f
            integer :: n
            complex*16 dimension(*) :: x
            integer :: incx
            double precision :: dznrm2
        end function dznrm2
        subroutine zstoptest2(n,r,b,bnrm2,resid,tol,info) ! in :zgmresrevcom:STOPTEST2.f
            integer, intent(hide), depend(b) :: n=len(b)
            complex*16, dimension(n), intent(in) :: r
            complex*16, dimension(n), intent(in) :: b
            double precision, intent(in, out) :: bnrm2
            double precision, intent(out) :: resid
            double precision, intent(in) :: tol
            integer, intent(in, out) :: info
        end subroutine zstoptest2
        subroutine zcopy(n,zx,incx,zy,incy) ! in :zgmresrevcom:zcopy.f
            integer :: n
            double complex dimension(*) :: zx
            integer :: incx
            double complex dimension(*) :: zy
            integer :: incy
        end subroutine zcopy
        function lsame(ca,cb) ! in :zgmresrevcom:lsame.f
            character :: ca
            character :: cb
            logical :: lsame
        end function lsame
    end interface 
end python module zgmresrevcom

! This file was auto-generated with f2py (version:2.45.241_1926).
! See http://cens.ioc.ee/projects/f2py2e/
